Le projet consiste à implémenter le système de paie d'une entreprise pour Pigiste en TI qui travaille sur Québec.
Le projet est découpé en Fronte-End et Back-End.
Le Front-End sera implémenté avec Angular16 et Node18
Le Back-End sera implémenté avec .Net core 6
La base de données à utiliser sera SQL Server 2019
Vous allez travailler dans le Front-end, le Backend et la conception de la base de données.

Tâches à faire:
[Mettre en place votre bureau de travail]

[Cleanup workstation]
1 - uninstall angular cli (https://stackoverflow.com/questions/39566257/how-to-uninstall-upgrade-angular-cli)
1-a) npm uninstall -g @angular/cli
1-b) npm cache clean --force
2 - Uninstall node

[Repartir un nouveau environnement:]
1 - Install node18 x64. (https://nodejs.org/en/download)
2 - Install angular cli v16: https://www.npmjs.com/package/@angular/cli/v/16.0.2?activeTab=versions
npm install -g @angular/cli
3 - Create folder Workspaces in your Data disk.
4 - Open console DOS and create your Angular project: https://angular.io/cli/new
ng new scsi-payroll-ui-web --routing (scss for stylesheet)


	B: to go to B disk before doing ng new (will not work with git bash)
	create the new project with --routing


5 - goto the folder scsi-payroll-ui-web (cd scsi-payroll-ui-web)

6 - Create un Github "sensini-stage" and save the project to the Github
https://github.com/StacAttacc/sensini-stage

7 - Complete the UI with Angular Material
	ng add @angular/material


8 - Implement responsive sidenav like in this youtube video: https://www.youtube.com/watch?v=4CYuOiRHHA8

add these in the app.module


import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

import { MatToolbarModule } from '@angular/material/toolbar';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatDividerModule } from '@angular/material/divider';


@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    MatToolbarModule,
    MatSidenavModule,
    MatButtonModule,
    MatIconModule,
    MatDividerModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})


Routing
https://www.youtube.com/watch?v=8hVP6jZ-gOM


[La suite des tâches à faire suivra]






Ouvrir VS 2022 et créer la solution : SCSI.Payroll
Ajouter un projet avec le template ASP.NET Core Web API: SCSI.Payroll.WebApi et cocher "Do not use top-level statements"
Ajouter la couche business avec le template "Class library": SCSI.Payroll.Business
Ajouter la couche Repository avec le template "Class library": SCSI.Payroll.Repository
Ajouter la couche Models qui est transversalle aux 3 couches, avec le template "Class library": SCSI.Payroll.Models
Ajouter des solutions folders 01-Presentation, 02-business, 03-repository et 04-transversal

install EFCore and EFCoreSqlServer in the project's dependencies
add project references to the classes other classes need to see for the 3 layers model

add interface folders for Business and Repositories, add implementation folders for Business and Repositories

add class PayrollDbContext, it represents the actual db in the project, but isn't the actual Db
repository implementation and iterfaces both need to see it, but it needs to be in the repository "project"



public class PayrollDbContext: DbContext
    {
        public PayrollDbContext(DbContextOptions<PayrollDbContext> options)
            :base(options)
        {

        }
        public virtual DbSet<Employee> Employees { get; set; }
    }




add the configuartion in the appsettings.development.json
"ConnectionSettings": {
    "PayrollConn": "Data Source=DESKTOP-879N252;Initial Catalog=Payrolldb; User Id=sa; Password=Password123"
  }


add the configurationBuilder in the program.cs

var configurationBuilder = new ConfigurationBuilder()
	.AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
	.AddJsonFile("appsettings.development.json", optional: true, reloadOnChange: true);
var configuration = configurationBuilder.Build();

inject it
builder.Services.AddSingleton<IConfiguration>(configuration);